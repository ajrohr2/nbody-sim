var documenterSearchIndex = {"docs":
[{"location":"constructors/#BasicNBodySim.jl-Constructors","page":"Body Constructors","title":"BasicNBodySim.jl Constructors","text":"","category":"section"},{"location":"constructors/","page":"Body Constructors","title":"Body Constructors","text":"CurrentModule = BasicNBodySim","category":"page"},{"location":"constructors/#Planets","page":"Body Constructors","title":"Planets","text":"","category":"section"},{"location":"constructors/","page":"Body Constructors","title":"Body Constructors","text":"Planet","category":"page"},{"location":"constructors/#BasicNBodySim.Planet","page":"Body Constructors","title":"BasicNBodySim.Planet","text":"Planet(mass::Float64, velocity::Vector{Float64}, position::Vector{Float64}, color) <: Body\n\nCreate a Planet object with mass, velocity, position, and color in S.I. units.\n\nExamples\n\njulia> Planet(5.9722e24, [0.0, 0.0], [0.0, 0.0], :blue)\nPlanet(5.9722e24, [0.0, 0.0], [0.0, 0.0], :blue)\n\n\n\n\n\n","category":"type"},{"location":"constructors/#Moons","page":"Body Constructors","title":"Moons","text":"","category":"section"},{"location":"constructors/","page":"Body Constructors","title":"Body Constructors","text":"Moon","category":"page"},{"location":"constructors/#BasicNBodySim.Moon","page":"Body Constructors","title":"BasicNBodySim.Moon","text":"Moon(mass::Float64, velocity::Vector{Float64}, position::Vector{Float64}, color) <: Body\n\nCreate a Moon object with mass, velocity, position, and color in S.I. units.\n\nExamples\n\njulia> Moon(7.348e22, [0.0, 1022.0], [3.844e8, 0.0], :gray)\nMoon(7.348e22, [0.0, 1022.0], [3.844e8, 0.0], :gray)\n\n\n\n\n\n","category":"type"},{"location":"constructors/#Stars","page":"Body Constructors","title":"Stars","text":"","category":"section"},{"location":"constructors/","page":"Body Constructors","title":"Body Constructors","text":"Star","category":"page"},{"location":"constructors/#BasicNBodySim.Star","page":"Body Constructors","title":"BasicNBodySim.Star","text":"Star(mass::Float64, velocity::Vector{Float64}, position::Vector{Float64}, color) <: Body\n\nCreate a Star object with mass, velocity, position, and color in S.I. units.\n\nExamples\n\njulia> Star(1.989e30, [0.0, 0.0], [0.0, 0.0], :blue)\nStar(1.989e30, [0.0, 0.0], [0.0, 0.0], :blue)\n\n\n\n\n\n","category":"type"},{"location":"functions/#BasicNBodySim.jl-Simulation-Functions","page":"Simulation Functions","title":"BasicNBodySim.jl Simulation Functions","text":"","category":"section"},{"location":"functions/","page":"Simulation Functions","title":"Simulation Functions","text":"CurrentModule = BasicNBodySim","category":"page"},{"location":"functions/#Simulate","page":"Simulation Functions","title":"Simulate","text":"","category":"section"},{"location":"functions/","page":"Simulation Functions","title":"Simulation Functions","text":"simulate(all_bodies::Vector{Body}, time::Float64, steps::Int64)","category":"page"},{"location":"functions/#BasicNBodySim.simulate-Tuple{Vector{Body}, Float64, Int64}","page":"Simulation Functions","title":"BasicNBodySim.simulate","text":"simulate(all_bodies::Vector{Body}, time::Float64, steps::Int64)\n\nSimulate the gravitational force between bodies in all_bodies for time seconds using Verlet Velocity symplectic integration.\n\nThe delta time is determined by time / steps.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Update","page":"Simulation Functions","title":"Update","text":"","category":"section"},{"location":"functions/","page":"Simulation Functions","title":"Simulation Functions","text":"update!(current_body::Body, all_bodies::Vector{Body}, dtime::Float64)","category":"page"},{"location":"functions/#BasicNBodySim.update!-Tuple{Body, Vector{Body}, Float64}","page":"Simulation Functions","title":"BasicNBodySim.update!","text":"update!(current_body::Body, all_bodies::Vector{Body}, dtime::Float64)\n\nUpdate the forces, positions, and velocities of the given current_body.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Get-axis-length","page":"Simulation Functions","title":"Get axis length","text":"","category":"section"},{"location":"functions/","page":"Simulation Functions","title":"Simulation Functions","text":"get_axlen(all_bodies::Vector{Body})","category":"page"},{"location":"functions/#BasicNBodySim.get_axlen-Tuple{Vector{Body}}","page":"Simulation Functions","title":"BasicNBodySim.get_axlen","text":"get_axlen(all_bodies::Vector{Body})\n\nGet the proper axis length given the positions of each simulated body.\n\nThis is only useful when making animations with CairoMakie.jl.\n\n\n\n\n\n","category":"method"},{"location":"examples/#BasicNBodySim.jl-Examples","page":"Examples","title":"BasicNBodySim.jl Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"CurrentModule = BasicNBodySim","category":"page"},{"location":"examples/#Simulate-the-Earth-Moon-orbit","page":"Examples","title":"Simulate the Earth-Moon orbit","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We first need to create a vector of the bodies we want to simulate. Let's create a planet with mass 5.9722e24 kg centered at (0,0) and a moon with mass 7.348e22 kg a distance of 3.844e8 meters from the center, with a velocity of 1022 m/s in the positive y direction.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"bodies = [\n    Planet(5.9722e24, [0.0, 0.0], [0.0, 0.0], :blue),\n    Moon(7.348e22, [0.0, 1022.0], [3.844e8, 0.0], :gray)\n]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now we can simulate a year of time (31536000 seconds) with 1 hour steps (365*24 steps). This will give us a stable simulation.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"simulate(bodies, 31536000.0, 365*24)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now if we check the position and velocities of the Planet and Moon objects, we get the following:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> bodies[1].position\n2-element Vector{Float64}:\n 1.110735831933807e7\n 3.9101189854465204e8","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> bodies[1].velocity\n2-element Vector{Float64}\n  1.9241461244645808\n 24.82682974654261","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Our Moon certainly moved, however it's difficult to see if the motion looks correct. To do this, we can create an animation using CairoMakie.jl, as explained in the next example.","category":"page"},{"location":"examples/#Save-an-animation-of-a-simulation","page":"Examples","title":"Save an animation of a simulation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note: This requires the use of CairoMakie.jl to create the animations.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can now simulate the n-body problem, but it would be nice to have a visual sanity check to determine what the motion looks like. To do this, we will use CairoMakie.jl's record function along with our update! function. Consider the following function:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CairoMakie\nusing BasicNBodySim\n\nfunction simulate_with_save(all_bodies::Vector{Body}, time::Float64, steps::Int64, frames::Int64, name::String)\n    dtime = time / steps\n\n    positions = [Point2f(p.position) for p in all_bodies]\n\n    fig = Figure()\n    ax = Axis(fig[1, 1], aspect=1)\n\n    axlen = get_axlen(all_bodies)\n\n    xlims!(ax, -axlen, axlen)\n    ylims!(ax, -axlen, axlen)\n    sc = scatter!(ax, positions, color=[b.color for b in all_bodies])\n\n    framerate = 30\n    frame_interval = div(steps, frames)\n\n    record(fig, name, 1:frames; framerate = framerate) do frame\n        for _ in 1:frame_interval\n            for body in all_bodies\n                update!(body, all_bodies, dtime)\n            end\n        end\n        central_pos = all_bodies[1].position\n        new_positions = [Point2f(p.position .- central_pos) for p in all_bodies]\n        sc[1][] = new_positions\n\n        new_axlen = get_axlen(all_bodies)\n        if new_axlen > axlen\n            axlen = new_axlen\n            xlims!(ax, -axlen, axlen)\n            ylims!(ax, -axlen, axlen)\n        end\n    end\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This function uses the update! function to step through individual updates of our system. We determine how many frames to record, then update the system and record the positions of each body every frames step. Then we save the animation to a file specified in name.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note: it's not necessary to record every frame, as this doesn't present new information visually and creates a very long video. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"If we record the same example we gave before, we get the following video:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<video width=\"640\" height=\"360\" controls>\n  <source src=\"assets/earth-moon.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>","category":"page"},{"location":"#BasicNBodySim.jl-Documentation","page":"Home","title":"BasicNBodySim.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BasicNBodySim","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package simulates the n-body problem (with video saving in 2d) using Verlet velocity integration. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Support for planets, moons, and stars of various sizes is included.","category":"page"}]
}
